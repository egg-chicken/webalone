(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  window.Alone = {
    Logger: require('./models/logger'),
    Dealer: require('./models/dealer'),
    Command: require('./models/command')
  };

}).call(this);

},{"./models/command":17,"./models/dealer":18,"./models/logger":19}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Array2D, Board, Characters, Inspector, Items, Land, _;

  _ = require('underscore');

  Array2D = require('utils/array2d');

  Characters = require('./board/characters');

  Items = require('./board/items');

  Land = require('./board/land');

  Inspector = require('./board/inspector');

  module.exports = Board = (function() {
    var HEIGHT, INITIAL_ENEMY_COUNT, INITIAL_ITEM_COUNT, WIDTH;

    WIDTH = 80;

    HEIGHT = 30;

    INITIAL_ENEMY_COUNT = 5;

    INITIAL_ITEM_COUNT = 5;

    Board.create = function(hero, monsterTable) {
      var characters, items, land;
      if (hero == null) {
        hero = null;
      }
      land = Land.createRandom(WIDTH, HEIGHT);
      characters = new Characters(monsterTable);
      characters.createEnemies(land.getFreePositions(), INITIAL_ENEMY_COUNT);
      characters.createHero(land.getFreePositions(), hero);
      items = new Items();
      items.createItems(land.getFreePositions(), INITIAL_ITEM_COUNT);
      return new Board(land, characters, items);
    };

    Board.createHall = function(width, height) {
      var characters, items, land;
      land = Land.createHall(width, height);
      characters = new Characters();
      items = new Items();
      return new Board(land, characters, items);
    };

    function Board(land1, characters1, items1) {
      this.land = land1;
      this.characters = characters1;
      this.items = items1;
    }

    Board.prototype.getHero = function() {
      return this.characters.getHero();
    };

    Board.prototype.getEnemies = function() {
      return this.characters.getEnemies();
    };

    Board.prototype.getCharacters = function() {
      return this.characters.getCharacters();
    };

    Board.prototype.get = function(position) {
      return this.characters.getByPosition(position);
    };

    Board.prototype.getItem = function(position) {
      return this.items.getByPosition(position);
    };

    Board.prototype.getDoors = function(position) {
      return this.land.getDoors(position);
    };

    Board.prototype.isExit = function(position) {
      return this.land.isExit(position);
    };

    Board.prototype.isRoom = function(position) {
      return this.land.isRoom(position);
    };

    Board.prototype.isSameRoom = function(a, b) {
      return this.land.isSameRoom(a, b);
    };

    Board.prototype.isWall = function(position) {
      return this.land.isWall(position);
    };

    Board.prototype.remove = function(obj) {
      return this.characters.remove(obj) || this.items.remove(obj);
    };

    Board.prototype.createOne = function(name) {
      return this.characters.createOne(this.land.getFreePositions(), name);
    };

    Board.prototype.put = function(position, character) {
      if (this.land.isWall(position)) {
        throw new Error("cannot put on the wall");
      }
      if (this.get(position)) {
        throw new Error("character is already exist ");
      }
      return character.setPosition(position);
    };

    Board.prototype.inspectBy = function(character) {
      return new Inspector(this, character);
    };

    Board.prototype.to_s = function() {
      var display_table, i, len, p, ref, symbol;
      display_table = new Array2D(WIDTH, HEIGHT);
      ref = display_table.pairs();
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        symbol = this.characters.getSymbol(p) || this.items.getSymbol(p) || this.land.getSymbol(p);
        display_table.set(p, symbol);
      }
      return display_table.to_s();
    };

    return Board;

  })();

}).call(this);

},{"./board/characters":11,"./board/inspector":12,"./board/items":14,"./board/land":15,"underscore":24,"utils/array2d":22}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Area, Array2D, Builder;

  Array2D = require('utils/array2d');

  Area = require('./builder/area');

  module.exports = Builder = (function() {
    function Builder() {}

    Builder.create = function(width, height) {
      var builder;
      builder = new Builder();
      return builder.create(width, height);
    };

    Builder.prototype.create = function(width, height) {
      this.table = new Array2D(width, height, 0);
      this.area = new Area(this.table);
      this._devide();
      this._rotate();
      this._devide();
      this._rotate();
      this._devide();
      this._rotate();
      this._devide();
      this._rotate();
      this.area.draw();
      return this.table;
    };

    Builder.prototype._rotate = function() {
      this.table = this.table.rotate();
      return this.area.rotate(this.table);
    };

    Builder.prototype._devide = function() {
      return this.area.devide();
    };

    Builder.test = function() {
      var board;
      board = Builder.create(130, 30);
      return console.log(board.to_s());
    };

    return Builder;

  })();

}).call(this);

},{"./builder/area":4,"utils/array2d":22}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Area, Cell, Line, Pair, _;

  _ = require('underscore');

  Pair = require('utils/pair');

  Cell = require('./cell');

  Line = require('./line');

  module.exports = Area = (function() {
    var SYMBOL, roomSymbol;

    SYMBOL = 0;

    roomSymbol = 'a'.charCodeAt();

    function Area(table1, base, end) {
      this.table = table1;
      this.base = base || new Pair(0, 0);
      this.end = end || new Pair(this.table.width - 1, this.table.height - 1);
      this.children = [];
      this.roomSymbol = roomSymbol;
      roomSymbol += 1;
    }

    Area.prototype.draw = function() {
      var child, code, i, j, len, len1, p, ref, ref1;
      if (_.isEmpty(this.children)) {
        ref = this.base.cover(this.end);
        for (i = 0, len = ref.length; i < len; i++) {
          p = ref[i];
          code = this._onEdge(p) ? SYMBOL : this.roomSymbol;
          this.table.set(p, code);
        }
      } else {
        ref1 = this.children;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          child = ref1[j];
          child.draw();
        }
      }
      return this.table;
    };

    Area.prototype.devide = function() {
      var border, borderBase, borderEnd, child, i, leftWall, len, ref, results, rightWall;
      if (this.end.x - this.base.x < 10 || this.end.y - this.base.y < 5) {
        return null;
      }
      if (_.isEmpty(this.children)) {
        border = _.random(this.base.x + 5, this.end.x - 6);
        borderBase = new Pair(border, this.base.y);
        borderEnd = new Pair(border, this.end.y);
        leftWall = _.random(1, border - this.base.x - 4);
        rightWall = _.random(1, this.end.x - border - 4);
        return this.children = [new Area(this.table, this.base, borderEnd.shift(-leftWall, 0)), new Area(this.table, borderBase.shift(rightWall, 0), this.end), new Line(this.table, borderBase.shift(0, 2), borderEnd.shift(0, -2)), new Line(this.table, borderBase.shift(-leftWall, 2), borderBase.shift(-1, 2)), new Line(this.table, borderEnd.shift(1, -2), borderEnd.shift(rightWall, -2)), new Cell(this.table, borderBase.shift(-leftWall, 2)), new Cell(this.table, borderEnd.shift(rightWall, -2))];
      } else {
        ref = this.children;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          results.push(typeof child.devide === "function" ? child.devide() : void 0);
        }
        return results;
      }
    };

    Area.prototype.rotate = function(rotatedTable) {
      var child, h, i, len, ref;
      ref = this.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        child.rotate(rotatedTable);
      }
      h = this.table.height - 1;
      return this._init(rotatedTable, h - this.base.y, this.base.x, h - this.end.y, this.end.x);
    };

    Area.prototype._onEdge = function(p) {
      return this.base.x === p.x || this.base.y === p.y || this.end.x === p.x || this.end.y === p.y;
    };

    Area.prototype._init = function(table, x, y, endX, endY) {
      this.table = table;
      this.base = new Pair(Math.min(x, endX), Math.min(y, endY));
      return this.end = new Pair(Math.max(x, endX), Math.max(y, endY));
    };

    return Area;

  })();

}).call(this);

},{"./cell":5,"./line":6,"underscore":24,"utils/pair":23}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Cell, Pair;

  Pair = require('utils/pair');

  module.exports = Cell = (function() {
    var SYMBOL;

    SYMBOL = '|';

    function Cell(table, position) {
      this.table = table;
      this.position = position;
    }

    Cell.prototype.draw = function() {
      return this.table.set(this.position, SYMBOL);
    };

    Cell.prototype.rotate = function(rotatedTable) {
      var h;
      h = this.table.height - 1;
      this.position = new Pair(h - this.position.y, this.position.x);
      return this.table = rotatedTable;
    };

    return Cell;

  })();

}).call(this);

},{"utils/pair":23}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Line, Pair, _;

  _ = require('underscore');

  Pair = require('utils/pair');

  module.exports = Line = (function() {
    var SYMBOL;

    SYMBOL = '_';

    function Line(table1, base, end) {
      this.table = table1;
      this.base = base;
      this.end = end;
    }

    Line.prototype.draw = function() {
      var i, len, p, ref, results;
      ref = this.base.cover(this.end);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        results.push(this.table.set(p, SYMBOL));
      }
      return results;
    };

    Line.prototype.rotate = function(rotatedTable) {
      var h;
      h = this.table.height - 1;
      return this._init(rotatedTable, h - this.base.y, this.base.x, h - this.end.y, this.end.x);
    };

    Line.prototype._init = function(table, x, y, endX, endY) {
      this.table = table;
      this.base = new Pair(Math.min(x, endX), Math.min(y, endY));
      return this.end = new Pair(Math.max(x, endX), Math.max(y, endY));
    };

    return Line;

  })();

}).call(this);

},{"underscore":24,"utils/pair":23}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Buffers, Character, Data, Piece, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  Piece = require('./piece');

  Buffers = require('./character/buffers');

  Data = require('./character/data');

  module.exports = Character = (function(superClass) {
    var TYPES;

    extend(Character, superClass);

    TYPES = {
      HERO: 1
    };

    Character.createRandomEnemy = function(position) {
      var type;
      type = _.random(3) + 2;
      return new Character(type, position);
    };

    Character.createHero = function(position) {
      return new Character(TYPES.HERO, position);
    };

    Character.create = function(nameOrIndex, position) {
      var index;
      if (nameOrIndex > 0) {
        index = nameOrIndex;
      } else {
        index = _.findIndex(Data, function(data) {
          return data[0] === nameOrIndex;
        });
      }
      if (!Data[index]) {
        throw new Error("unknown character: " + nameOrIndex);
      }
      return new Character(index, position);
    };

    function Character(type1, position1) {
      this.type = type1;
      this.position = position1;
      Character.__super__.constructor.call(this, this.type, this.position);
      this.buffers = new Buffers();
      this.items = [];
      this.skillCount = 0;
      this.symbol = Data[this.type][1];
      this.skill = Data[this.type][2];
      this.skillRange = Data[this.type][3];
      this.strategy = Data[this.type][4];
      this.score = Data[this.type][5];
      this.maxHealth = Data[this.type][6];
      this.health = this.maxHealth;
    }

    Character.prototype.getSymbol = function() {
      return this.symbol;
    };

    Character.prototype.getScore = function() {
      return this.score;
    };

    Character.prototype.getSkill = function() {
      return this.skill;
    };

    Character.prototype.getStrategy = function() {
      return this.strategy;
    };

    Character.prototype.getPosition = function() {
      return this.position;
    };

    Character.prototype.addSkillCount = function() {
      return this.skillCount += 1;
    };

    Character.prototype.getSkillCount = function() {
      return this.skillCount;
    };

    Character.prototype.getSkillRange = function() {
      return this.skillRange;
    };

    Character.prototype.damage = function(base) {
      var point;
      point = Math.max(0, this.buffers.diffence(base));
      this.health -= point;
      return point;
    };

    Character.prototype.heal = function(point) {
      return this.health = Math.min(this.maxHealth, this.health + point);
    };

    Character.prototype.cure = function(status) {};

    Character.prototype.isDead = function() {
      return this.health <= 0;
    };

    Character.prototype.isHero = function() {
      return this.type === TYPES.HERO;
    };

    Character.prototype.isHealthy = function() {
      return this.health === this.maxHealth;
    };

    Character.prototype.addItem = function(item) {
      return this.items.push(item);
    };

    Character.prototype.getItems = function() {
      return this.items;
    };

    Character.prototype.setItems = function(items) {
      return this.items = items;
    };

    Character.prototype.useItem = function(item, target) {
      var found;
      if (target == null) {
        target = this;
      }
      found = _.findIndex(this.items, function(i) {
        return i === item;
      });
      if (found >= 0) {
        this.items.splice(found, 1);
        return item.activate(target);
      } else {
        throw new Error("the character doesn't have item " + item);
      }
    };

    Character.prototype.getHealthString = function() {
      return this.health + "/" + this.maxHealth;
    };

    Character.prototype.getItemsString = function() {
      return _.map(this.items, function(item) {
        return item.getSymbol();
      }).join(",");
    };

    Character.prototype.getBuffersString = function() {
      return this.buffers.to_s();
    };

    Character.prototype.waneBuffers = function() {
      return this.buffers.wane();
    };

    Character.prototype.addDiffenceBuffer = function(point, duration) {
      return this.buffers.addDiffenceBuffer(point, duration);
    };

    return Character;

  })(Piece);

}).call(this);

},{"./character/buffers":9,"./character/data":10,"./piece":16,"underscore":24}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Buffer;

  module.exports = Buffer = (function() {
    var TYPES;

    TYPES = {
      ATTACK: 0,
      DIFFENCE: 1
    };

    Buffer.createDiffenceBuffer = function(point, duration) {
      return new Buffer(TYPES.DIFFENCE, point, duration);
    };

    function Buffer(type, point1, duration1) {
      this.type = type;
      this.point = point1;
      this.duration = duration1;
    }

    Buffer.prototype.isAttackBuffer = function() {
      return this.type === TYPES.ATTACK;
    };

    Buffer.prototype.isDiffenceBuffer = function() {
      return this.type === TYPES.DIFFENCE;
    };

    Buffer.prototype.isExpired = function() {
      return this.duration <= 0;
    };

    Buffer.prototype.wane = function() {
      return this.duration -= 1;
    };

    Buffer.prototype.getPoint = function() {
      return this.point;
    };

    Buffer.prototype.getSymbol = function() {
      switch (this.type) {
        case TYPES.ATTACK:
          return "A(" + this.duration + ")";
        case TYPES.DIFFENCE:
          return "D(" + this.duration + ")";
      }
    };

    return Buffer;

  })();

}).call(this);

},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Buffer, Buffers, _;

  _ = require('underscore');

  Buffer = require('./buffer');

  module.exports = Buffers = (function() {
    function Buffers() {
      this.list = [];
    }

    Buffers.prototype.diffence = function(base) {
      var calc;
      calc = function(point, buf) {
        if (buf.isDiffenceBuffer()) {
          return point -= buf.getPoint();
        } else {
          return point;
        }
      };
      return _.inject(this.list, calc, base);
    };

    Buffers.prototype.addDiffenceBuffer = function(point, duration) {
      var buffer;
      buffer = Buffer.createDiffenceBuffer(point, duration);
      return this.list.push(buffer);
    };

    Buffers.prototype.to_s = function() {
      return _.map(this.list, function(buffer) {
        return buffer.getSymbol();
      }).join(",");
    };

    Buffers.prototype.wane = function() {
      var i, j, ref, results, size;
      size = this.list.length - 1;
      results = [];
      for (i = j = ref = size; j >= 0; i = j += -1) {
        this.list[i].wane();
        if (this.list[i].isExpired()) {
          results.push(this.list.splice(i, 1));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Buffers;

  })();

}).call(this);

},{"./buffer":8,"underscore":24}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = [['NAME', 'SYMBOL', 'SKILL', 'SKILLRANGE', 'STRATEGY', 'SCORE', 'HEALTH'], ['主人公', 'H', 'NOTHING', 0, 'whim', 0, 3], ['灰泥緑虫', 'S', 'ACID', 1, 'whim', 10, 1], ['手甲虫', 'B', 'GUARDFORM', 0, 'guard', 15, 2], ['葛籠鼠', 'M', 'AID', 1, 'devoted', 20, 2], ['盲瓜坊', 'P', 'TACKLE', 1, 'traveler', 25, 3]];

}).call(this);

},{}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Character, Characters, _;

  _ = require('underscore');

  Character = require('./character');

  module.exports = Characters = (function() {
    var MAX_SIZE;

    MAX_SIZE = 30;

    function Characters(monsterTable) {
      this.monsterTable = monsterTable;
      this.list = [];
    }

    Characters.prototype.createHero = function(freePositions, hero) {
      if (hero) {
        return this.addOne(freePositions, hero);
      } else {
        return this.createOne(freePositions, '主人公');
      }
    };

    Characters.prototype.createEnemies = function(freePositions, count) {
      var i, j, ref, results;
      count = Math.min(count, MAX_SIZE);
      results = [];
      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(this.createOne(freePositions));
      }
      return results;
    };

    Characters.prototype.createOne = function(freePositions, nameOrIndex) {
      var character, position, ref;
      if (!nameOrIndex && ((ref = this.monsterTable) != null ? ref.length : void 0) > 0) {
        nameOrIndex = _.sample(this.monsterTable);
      }
      position = _.find(freePositions, (function(_this) {
        return function(p) {
          return !_this.getByPosition(p);
        };
      })(this));
      character = Character.create(nameOrIndex, position);
      this.list.push(character);
      return character;
    };

    Characters.prototype.addOne = function(freePositions, character) {
      var position;
      position = _.find(freePositions, (function(_this) {
        return function(p) {
          return !_this.getByPosition(p);
        };
      })(this));
      character.setPosition(position);
      this.list.push(character);
      return character;
    };

    Characters.prototype.getHero = function() {
      return _.find(this.list, function(character) {
        return character.isHero();
      });
    };

    Characters.prototype.getEnemies = function() {
      return _.filter(this.list, function(character) {
        return !character.isHero();
      });
    };

    Characters.prototype.getCharacters = function() {
      return this.list;
    };

    Characters.prototype.getByPosition = function(position) {
      return _.find(this.list, function(character) {
        return character.getPosition().equal(position);
      });
    };

    Characters.prototype.getSymbol = function(position) {
      var ref;
      return (ref = this.getByPosition(position)) != null ? ref.getSymbol() : void 0;
    };

    Characters.prototype.remove = function(character) {
      var found;
      found = _.findIndex(this.list, function(c) {
        return c === character;
      });
      if (found >= 0) {
        this.list.splice(found, 1);
      }
      return found >= 0;
    };

    return Characters;

  })();

}).call(this);

},{"./character":7,"underscore":24}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Inspector, _;

  _ = require('underscore');

  module.exports = Inspector = (function() {
    var DIRECTIONS;

    DIRECTIONS = ['up', 'down', 'left', 'right'];

    function Inspector(board, character) {
      this.board = board;
      this.character = character;
      this.base = this.character.getPosition();
      this.hero = this.board.getHero();
    }

    Inspector.prototype.findHero = function() {
      if (this.board.isRoom(this.base) && this.board.isSameRoom(this.base, this.hero.getPosition())) {
        return this.hero;
      } else if (this.getDistance(this.hero) < 2) {
        return this.hero;
      } else {
        return null;
      }
    };

    Inspector.prototype.findNearByDirection = function(target) {
      var method, targetPosition;
      targetPosition = (typeof target.getPosition === "function" ? target.getPosition() : void 0) || target;
      method = (function(_this) {
        return function(direction) {
          return targetPosition.distance(_this.base[direction]());
        };
      })(this);
      return _.min(_.shuffle(DIRECTIONS), method);
    };

    Inspector.prototype.isNeighbor = function(target) {
      return this.getDistance(target) < 2;
    };

    Inspector.prototype.isWalkable = function(target) {
      return !this.board.isWall(target);
    };

    Inspector.prototype.getNearestCharacterInSight = function() {
      var characters;
      characters = this.getCharactersInSight();
      if (_.isEmpty(characters)) {
        return;
      }
      return _.min(characters, (function(_this) {
        return function(target) {
          return _this.getDistance(target);
        };
      })(this));
    };

    Inspector.prototype.getCharactersInSight = function() {
      var characters, inRoom;
      characters = this.board.getCharacters();
      inRoom = this.board.isRoom(this.base);
      return _.filter(characters, (function(_this) {
        return function(target) {
          if (target === _this.character) {
            return false;
          } else if (inRoom) {
            return _this.board.isSameRoom(_this.base, target.getPosition());
          } else {
            return _this.getDistance(target) === 1;
          }
        };
      })(this));
    };

    Inspector.prototype.getDoorsInSight = function() {
      if (this.board.isRoom(this.base)) {
        return this.board.getDoors(this.base);
      } else {
        return [];
      }
    };

    Inspector.prototype.getDistance = function(target) {
      return target.getPosition().distance(this.base);
    };

    return Inspector;

  })();

}).call(this);

},{"underscore":24}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Item, Piece,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Piece = require('./piece');

  module.exports = Item = (function(superClass) {
    extend(Item, superClass);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.POTION = 1;

    Item.MEDICINE = 2;

    Item.prototype.getSymbol = function() {
      switch (this.type) {
        case Item.POTION:
          return 'p';
        case Item.MEDICINE:
          return 'm';
      }
    };

    Item.prototype.getFullName = function() {
      switch (this.type) {
        case Item.POTION:
          return 'potion';
        case Item.MEDICINE:
          return 'medicine';
      }
    };

    Item.prototype.getDescription = function() {
      switch (this.type) {
        case Item.POTION:
          return "heal character's health";
        case Item.MEDICINE:
          return "cure character's abnormal status";
      }
    };

    Item.prototype.activate = function(target) {
      switch (this.type) {
        case Item.POTION:
          return target.heal(3);
        case Item.MEDICINE:
          return target.cure();
      }
    };

    return Item;

  })(Piece);

}).call(this);

},{"./piece":16}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Item, Items, _;

  _ = require('underscore');

  Item = require('./item');

  module.exports = Items = (function() {
    var MAX_SIZE;

    MAX_SIZE = 30;

    function Items() {
      this.list = [];
    }

    Items.prototype.createItems = function(free_positions, count) {
      var j, len, p, position, size;
      position = _.find(free_positions, (function(_this) {
        return function(p) {
          return !_this.getByPosition(p);
        };
      })(this));
      for (j = 0, len = free_positions.length; j < len; j++) {
        p = free_positions[j];
        size = this.list.length;
        if (size >= count || size >= MAX_SIZE) {
          return;
        }
        this.list.push(new Item(Item.POTION, p));
      }
    };

    Items.prototype.getByPosition = function(position) {
      return _.find(this.list, function(item) {
        return item.getPosition().equal(position);
      });
    };

    Items.prototype.getSymbol = function(position) {
      var ref;
      return (ref = this.getByPosition(position)) != null ? ref.getSymbol() : void 0;
    };

    Items.prototype.remove = function(item) {
      var found;
      found = _.findIndex(this.list, function(i) {
        return i === item;
      });
      if (found >= 0) {
        this.list.splice(found, 1);
      }
      return found >= 0;
    };

    return Items;

  })();

}).call(this);

},{"./item":13,"underscore":24}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Array2D, Builder, Land, _;

  _ = require('underscore');

  Builder = require('./builder');

  Array2D = require('utils/array2d');

  module.exports = Land = (function() {
    var DOOR, EXIT, PATH, WALL;

    function Land() {}

    WALL = 0;

    DOOR = 1;

    PATH = 2;

    EXIT = 3;

    Land.createRandom = function(width, height) {
      var land;
      land = new Land();
      land._randomize(width, height);
      land._setExit();
      return land;
    };

    Land.createHall = function(width, height) {
      var i, land, len, p, pairs;
      land = new Land();
      land.table = new Array2D(width, height, 'a'.charCodeAt());
      pairs = land.table.round();
      for (i = 0, len = pairs.length; i < len; i++) {
        p = pairs[i];
        land.table.set(p, WALL);
      }
      return land;
    };

    Land.prototype.getFreePositions = function() {
      var filtered;
      filtered = _.filter(this.table.pairs(), (function(_this) {
        return function(p) {
          return _this.isRoom(p);
        };
      })(this));
      return _.shuffle(filtered);
    };

    Land.prototype.isWall = function(position) {
      return this.table.get(position) === WALL;
    };

    Land.prototype.isDoor = function(position) {
      return this.table.get(position) === DOOR;
    };

    Land.prototype.isExit = function(position) {
      return this.table.get(position) === EXIT;
    };

    Land.prototype.isRoom = function(position) {
      return this.table.get(position) > EXIT;
    };

    Land.prototype.isSameRoom = function(a, b) {
      return this.table.get(a) === this.table.get(b);
    };

    Land.prototype.getDoors = function(position) {
      var roomCode;
      roomCode = this.table.get(position);
      return _.filter(this.table.pairs(), (function(_this) {
        return function(p) {
          var direction, i, len, ref;
          if (!_this.isDoor(p)) {
            return false;
          }
          ref = ['up', 'right', 'left', 'down'];
          for (i = 0, len = ref.length; i < len; i++) {
            direction = ref[i];
            if (_this.table.get(p[direction]()) === roomCode) {
              return true;
            }
          }
          return false;
        };
      })(this));
    };

    Land.prototype.getSymbol = function(position) {
      switch (this.table.get(position)) {
        case WALL:
          return '#';
        case DOOR:
          return '|';
        case PATH:
          return ' ';
        case EXIT:
          return '@';
        default:
          return " ";
      }
    };

    Land.prototype.getSymbolDetail = function(position) {
      var tile;
      tile = this.table.get(position);
      switch (tile) {
        case WALL:
          return '#';
        case DOOR:
          return '|';
        case EXIT:
          return '@';
        default:
          return String.fromCharCode(tile);
      }
    };

    Land.prototype._setExit = function() {
      var pairs, position;
      pairs = _.shuffle(this.table.pairs());
      position = _.find(pairs, (function(_this) {
        return function(p) {
          return _this.isRoom(p);
        };
      })(this));
      return this.table.set(position, EXIT);
    };

    Land.prototype._randomize = function(width, height) {
      var i, len, p, ref, results, tile;
      this.table = Builder.create(width, height);
      ref = this.table.pairs();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        tile = this.table.get(p);
        switch (tile) {
          case 0:
            results.push(this.table.set(p, WALL));
            break;
          case '|':
            results.push(this.table.set(p, DOOR));
            break;
          case '_':
            results.push(this.table.set(p, PATH));
            break;
          default:
            results.push(this.table.set(p, tile));
        }
      }
      return results;
    };

    return Land;

  })();

}).call(this);

},{"./builder":3,"underscore":24,"utils/array2d":22}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Piece;

  module.exports = Piece = (function() {
    var count;

    count = 0;

    function Piece(type, position) {
      this.type = type;
      this.position = position;
      count += 1;
      this.id = count;
    }

    Piece.prototype.getSymbol = function() {
      throw new Error('this method must be overriden');
    };

    Piece.prototype.getId = function() {
      return this.id;
    };

    Piece.prototype.setPosition = function(p) {
      return this.position = p;
    };

    Piece.prototype.getPosition = function() {
      return this.position;
    };

    Piece.prototype.getUniqueName = function() {
      return (this.getSymbol()) + "(" + this.id + ")";
    };

    return Piece;

  })();

}).call(this);

},{}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Command, Logger;

  Logger = require('./logger');

  module.exports = Command = (function() {
    var ACTIONS;

    ACTIONS = {
      MOVE_OR_ATTACK: 0,
      USE_SKILL: 1,
      USE_ITEM: 2,
      MOVE: 3
    };

    Command.createMove = function(actor, direction) {
      var command;
      command = new Command(ACTIONS.MOVE, actor);
      command.direction = direction;
      return command;
    };

    Command.createMoveOrAttack = function(actor, direction) {
      var command;
      command = new Command(ACTIONS.MOVE_OR_ATTACK, actor);
      command.direction = direction;
      return command;
    };

    Command.createUseSkill = function(actor, target) {
      var command;
      command = new Command(ACTIONS.USE_SKILL, actor);
      command.target = target;
      return command;
    };

    Command.createUseItem = function(actor, item) {
      var command;
      command = new Command(ACTIONS.USE_ITEM, actor);
      command.item = item;
      return command;
    };

    function Command(action, actor1) {
      this.action = action;
      this.actor = actor1;
      this.score = 0;
    }

    Command.prototype.perform = function(board) {
      var e, error, error1;
      switch (this.action) {
        case ACTIONS.USE_ITEM:
          Logger.useItem(this.actor, this.item);
          return this.actor.useItem(this.item);
        case ACTIONS.USE_SKILL:
          Logger.useSkill(this.actor, this.actor.getSkill());
          try {
            return this._useSkill(board);
          } catch (error) {
            e = error;
            return Logger.failed(e);
          }
          break;
        case ACTIONS.MOVE_OR_ATTACK:
          return this._moveOrAttack(board);
        case ACTIONS.MOVE:
          try {
            return this._move(board);
          } catch (error1) {
            e = error1;
            return Logger.failed(e);
          }
      }
    };

    Command.prototype.getScore = function() {
      return this.score;
    };

    Command.prototype._moveOrAttack = function(board) {
      var e, error, from, target, to;
      from = this.actor.getPosition();
      to = from[this.direction]();
      target = board.get(to);
      try {
        if (to && target) {
          return this._attack(target, board);
        } else if (to) {
          return this._move(board);
        } else {
          return Logger.doNothing(this.actor);
        }
      } catch (error) {
        e = error;
        return Logger.failed(e);
      }
    };

    Command.prototype._move = function(board) {
      var from, item, to;
      from = this.actor.getPosition();
      to = from[this.direction]();
      Logger.move(this.actor, to);
      board.put(to, this.actor);
      item = board.getItem(to);
      if (item) {
        Logger.getItem(this.actor, item);
        this.actor.addItem(item);
        return board.remove(item);
      }
    };

    Command.prototype._attack = function(target, board) {
      var point;
      Logger.attack(this.actor, target);
      point = target.damage(1);
      Logger.isDamaged(target, point);
      if (target.isDead()) {
        Logger.isDead(target);
        board.remove(target);
        return this.score += target.getScore();
      }
    };

    Command.prototype._useSkill = function(board) {
      switch (this.actor.getSkill()) {
        case 'ACID':
          return;
        case 'GUARDFORM':
          this.actor.addDiffenceBuffer(1, 2);
          break;
        case 'AID':
          if (this.target.isHealthy()) {
            throw new Error("He canceled skill, because that is meaningless");
          } else if (this.actor.getSkillCount() <= 2) {
            this.target.heal(3);
          } else {
            throw new Error("He doesn't have medicine!");
          }
          break;
        case 'TACKLE':
          this._tackle(board);
          break;
        default:
          throw new Error("use unknown skill " + name);
      }
      return this.actor.addSkillCount();
    };

    Command.prototype._tackle = function(board) {
      var backPosition, direction, i, len, pa, pt, ref, results, testPosition;
      pa = this.actor.getPosition();
      pt = this.target.getPosition();
      if (pa.distance(pt) > 1) {
        throw new Error('He cannot reach the target');
      }
      ref = ['up', 'down', 'left', 'right'];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        direction = ref[i];
        testPosition = pa[direction]();
        if (testPosition.equal(pt)) {
          backPosition = pt[direction]();
          if (board.isWall(backPosition)) {
            results.push(this.target.damage(1));
          } else {
            results.push(board.put(backPosition, this.target));
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return Command;

  })();

}).call(this);

},{"./logger":19}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Board, Dealer, Logger, Player;

  Board = require('./board');

  Player = require('./player');

  Logger = require('./logger');

  module.exports = Dealer = (function() {
    var BOARD, MONSTER_TABLE;

    BOARD = {
      PLAYING: 0,
      COMPLETED: 1,
      FAILED: 2
    };

    MONSTER_TABLE = [[], [2, 2, 2, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 4], [3, 3, 4, 5, 5], [5, 5, 5, 5, 5]];

    function Dealer() {
      this.players = [Player.createHuman(), Player.createComputer()];
      this.boardCount = 0;
      this.setupBoard();
    }

    Dealer.prototype.setupBoard = function() {
      var ref;
      this.boardCount += 1;
      this.board = Board.create((ref = this.board) != null ? ref.getHero() : void 0, MONSTER_TABLE[this.boardCount]);
      this.boardStatus = BOARD.PLAYING;
      this.players[0].assign(this.board.getHero());
      return this.players[1].assign(this.board.getEnemies());
    };

    Dealer.prototype.round = function(playerCommand) {
      var i, j, len, len1, player, ref, ref1, results;
      ref = this.players;
      for (i = 0, len = ref.length; i < len; i++) {
        player = ref[i];
        this.turnPlayer = player;
        if (player.isHuman()) {
          this._turn(playerCommand);
        } else {
          this._turn();
        }
      }
      if (this.boardIsCompleted()) {
        ref1 = this.players;
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          player = ref1[j];
          results.push(player.completeBoard());
        }
        return results;
      }
    };

    Dealer.prototype.boardIsCompleted = function() {
      return this.boardStatus === BOARD.COMPLETED;
    };

    Dealer.prototype.boardIsFailed = function() {
      return this.boardStatus === BOARD.FAILED;
    };

    Dealer.prototype._turn = function(playerCommand) {
      var character, command, i, len, ref, results;
      ref = this.turnPlayer.characters();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        character = ref[i];
        if (this.boardStatus === BOARD.PLAYING) {
          command = playerCommand || this.turnPlayer.command(character, this.board.inspectBy(character));
          command.perform(this.board);
          results.push(this._afterPerform(character, command));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Dealer.prototype._afterPerform = function(character, command) {
      var to;
      this.turnPlayer.addScore(command.getScore());
      character.waneBuffers();
      to = character.getPosition();
      if (this.board.isExit(to) && this.turnPlayer.isHuman()) {
        Logger.reachExit(character);
        return this.boardStatus = BOARD.COMPLETED;
      } else if (!(this.board.getHero())) {
        Logger.gameOver(character);
        return this.boardStatus = BOARD.FAILED;
      }
    };

    return Dealer;

  })();

}).call(this);

},{"./board":2,"./logger":19,"./player":20}],19:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Logger;

  module.exports = Logger = (function() {
    function Logger() {}

    Logger.doNothing = function(character) {
      return console.log((character.getUniqueName()) + " do nothing");
    };

    Logger.attack = function(character, target) {
      return console.log((character.getUniqueName()) + " attacked " + (target.getUniqueName()));
    };

    Logger.isDamaged = function(character, point) {
      return console.log((character.getUniqueName()) + " take " + point + " damage");
    };

    Logger.isDead = function(character) {
      return console.log((character.getUniqueName()) + " is dead");
    };

    Logger.move = function(character, to) {
      return console.log((character.getUniqueName()) + " go to (" + (to.to_s()) + ")");
    };

    Logger.reachExit = function(character) {
      return console.log((character.getUniqueName()) + " reached exit of this board");
    };

    Logger.getItem = function(character, item) {
      return console.log((character.getUniqueName()) + " got " + (item.getUniqueName()));
    };

    Logger.useItem = function(character, item) {
      return console.log((character.getUniqueName()) + " used " + (item.getFullName()));
    };

    Logger.useSkill = function(character, skill) {
      return console.log((character.getUniqueName()) + " used " + skill);
    };

    Logger.failed = function(error) {
      return console.log("but failed (" + error.message + ")");
    };

    Logger.gameOver = function(character) {
      return console.log("game is over, goodbye");
    };

    return Logger;

  })();

}).call(this);

},{}],20:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Player, Strategy, _;

  _ = require('underscore');

  Strategy = require('./player/strategy');

  module.exports = Player = (function() {
    var MODE;

    MODE = {
      HUMAN: 0,
      COMPUTER: 1
    };

    function Player(mode) {
      this.mode = mode;
      this.hand = [];
      this.strategies = {};
      this.score = 0;
      this.boardCount = 1;
    }

    Player.createHuman = function() {
      return new Player(MODE.HUMAN);
    };

    Player.createComputer = function() {
      return new Player(MODE.COMPUTER);
    };

    Player.prototype.assign = function(character) {
      if (character instanceof Array) {
        return this.hand = this.hand.concat(character);
      } else {
        return this.hand.push(character);
      }
    };

    Player.prototype.characters = function() {
      return _.filter(this.hand, function(character) {
        return !character.isDead();
      });
    };

    Player.prototype.command = function(character, inspector) {
      if (!this.strategies[character.getId()]) {
        this.strategies[character.getId()] = new Strategy(character);
      }
      return this.strategies[character.getId()].createCommand(inspector);
    };

    Player.prototype.getScore = function() {
      return this.score;
    };

    Player.prototype.addScore = function(point) {
      return this.score += point;
    };

    Player.prototype.completeBoard = function() {
      this.score += this.boardCount * 100;
      this.boardCount += 1;
      this.hand = [];
      return this.strategies = {};
    };

    Player.prototype.getBoardCount = function() {
      return this.boardCount;
    };

    Player.prototype.isHuman = function() {
      return this.mode === MODE.HUMAN;
    };

    Player.prototype.isComputer = function() {
      return this.mode === MODE.COMPUTER;
    };

    return Player;

  })();

}).call(this);

},{"./player/strategy":21,"underscore":24}],21:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Command, Strategy, _;

  _ = require('underscore');

  Command = require('models/command');

  module.exports = Strategy = (function() {
    var DIRECTIONS, SKILL_USE_RATE;

    SKILL_USE_RATE = 1 / 4;

    DIRECTIONS = ['up', 'down', 'left', 'right'];

    function Strategy(character) {
      this.character = character;
      this.type = this.character.getStrategy();
      this.milestone = null;
      this.prevPosition = null;
    }

    Strategy.prototype.createCommand = function(inspector) {
      this.inspector = inspector;
      switch (this.type) {
        case 'whim':
          return this.whim();
        case 'guard':
          return this.guard();
        case 'devoted':
          return this.devoted();
        case 'traveler':
          return this.traveler();
        default:
          throw new Error('unknown strategy type #{@type}');
      }
    };

    Strategy.prototype.whim = function() {
      var hero;
      hero = this.inspector.findHero();
      if (hero && this.inspector.isNeighbor(hero)) {
        return this._attackOrUseSkill();
      } else {
        return this._randomMove();
      }
    };

    Strategy.prototype.guard = function() {
      if (this.inspector.findHero()) {
        return this._attackOrUseSkill();
      } else {
        return this._randomMove();
      }
    };

    Strategy.prototype.devoted = function() {
      var target;
      target = this.inspector.getNearestCharacterInSight();
      if (target == null) {
        return this._randomMove();
      } else if (this.inspector.getDistance(target) > 1) {
        return this._approach(target);
      } else if (target === this.inspector.findHero()) {
        return this._attack(target);
      } else {
        return this._useSkill(target);
      }
    };

    Strategy.prototype.traveler = function() {
      var direction, doors, hero, i, len, next;
      if (this.character.getPosition().equal(this.milestone)) {
        this.milestone = null;
      }
      hero = this.inspector.findHero();
      doors = this.inspector.getDoorsInSight();
      if (hero) {
        return this._attackOrUseSkill();
      } else if (this.milestone != null) {
        return this._approach(this.milestone);
      } else if (doors.length > 0) {
        this.milestone = _.sample(doors);
        return this._approach(this.milestone);
      } else {
        for (i = 0, len = DIRECTIONS.length; i < len; i++) {
          direction = DIRECTIONS[i];
          next = this.character.getPosition()[direction]();
          if (!next.equal(this.prevPosition) && this.inspector.isWalkable(next)) {
            return this._approach(next);
          }
        }
      }
    };

    Strategy.prototype._attackOrUseSkill = function(target) {
      if (Math.random() > SKILL_USE_RATE) {
        return this._attack();
      } else {
        return this._useSkill(target);
      }
    };

    Strategy.prototype._approach = function(target) {
      var direction;
      target || (target = this.inspector.findHero());
      direction = this.inspector.findNearByDirection(target);
      this.prevPosition = this.character.getPosition();
      return Command.createMoveOrAttack(this.character, direction);
    };

    Strategy.prototype._attack = function(target) {
      return this._approach(target);
    };

    Strategy.prototype._useSkill = function(target) {
      switch (this.character.getSkillRange()) {
        case 1:
          target || (target = this.inspector.findHero());
          return Command.createUseSkill(this.character, target);
        case 0:
          return Command.createUseSkill(this.character, this.character);
        default:
          throw new Error('cannot deal the skill range: #{@character.getSkillRange()}');
      }
    };

    Strategy.prototype._randomMove = function() {
      var direction;
      direction = _.sample(DIRECTIONS);
      return Command.createMove(this.character, direction);
    };

    return Strategy;

  })();

}).call(this);

},{"models/command":17,"underscore":24}],22:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Array2D, Pair, _;

  _ = require('underscore');

  Pair = require('./pair');

  module.exports = Array2D = (function() {
    Array2D.create = function(values) {
      var array2d, height, i, j, ref, ref1, width, x, y;
      height = values.length;
      width = values[0].length;
      array2d = new Array2D(width, height);
      for (y = i = 0, ref = height; 0 <= ref ? i < ref : i > ref; y = 0 <= ref ? ++i : --i) {
        for (x = j = 0, ref1 = width; 0 <= ref1 ? j < ref1 : j > ref1; x = 0 <= ref1 ? ++j : --j) {
          array2d.set(x, y, values[y][x]);
        }
      }
      return array2d;
    };

    function Array2D(width1, height1, default_value) {
      var i, j, ref, ref1, x, y;
      this.width = width1;
      this.height = height1;
      if (default_value == null) {
        default_value = null;
      }
      this.rows = [];
      for (y = i = 0, ref = this.height; 0 <= ref ? i < ref : i > ref; y = 0 <= ref ? ++i : --i) {
        this.rows[y] = [];
        for (x = j = 0, ref1 = this.width; 0 <= ref1 ? j < ref1 : j > ref1; x = 0 <= ref1 ? ++j : --j) {
          this.rows[y][x] = default_value;
        }
      }
    }

    Array2D.prototype.set = function(x, y, value) {
      if (x instanceof Pair) {
        value = y;
        y = x.y;
        x = x.x;
      }
      this._check(x, y);
      return this.rows[y][x] = value;
    };

    Array2D.prototype.get = function(x, y) {
      if (x instanceof Pair) {
        y = x.y;
        x = x.x;
      }
      this._check(x, y);
      return this.rows[y][x];
    };

    Array2D.prototype.pairs = function() {
      var a, i, j, ref, ref1, x, y;
      a = [];
      for (y = i = 0, ref = this.height; 0 <= ref ? i < ref : i > ref; y = 0 <= ref ? ++i : --i) {
        for (x = j = 0, ref1 = this.width; 0 <= ref1 ? j < ref1 : j > ref1; x = 0 <= ref1 ? ++j : --j) {
          a.push(new Pair(x, y));
        }
      }
      return a;
    };

    Array2D.prototype.round = function() {
      var test;
      test = (function(_this) {
        return function(p) {
          return p.x === 0 || p.y === 0 || p.x === _this.width - 1 || p.y === _this.height - 1;
        };
      })(this);
      return _.filter(this.pairs(), test);
    };

    Array2D.prototype.rotate = function() {
      var a, i, len, p, ref;
      a = new Array2D(this.height, this.width);
      ref = this.pairs();
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        a.set(this.height - 1 - p.y, p.x, this.get(p));
      }
      return a;
    };

    Array2D.prototype.clear = function(value) {
      var i, len, p, ref, results;
      if (value == null) {
        value = null;
      }
      ref = this.pairs();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        results.push(a.set(p, value));
      }
      return results;
    };

    Array2D.prototype.to_s = function() {
      return this.rows.join("\n").replace(/,/g, "");
    };

    Array2D.prototype._check = function(x, y) {
      if (x < 0 || y < 0 || y >= this.height || x >= this.width) {
        throw new Error("out of range " + x + ", " + y);
      }
    };

    Array2D.test = function() {
      var error, error1, table;
      table = new Array2D(5, 10, 0);
      table.set(0, 1, 8);
      table.set(new Pair(0, 2), 'A');
      console.log(table.to_s());
      console.log("--------------------");
      console.log(table.rotate().to_s());
      console.log("--------------------");
      try {
        return table.set(5, 10, 9);
      } catch (error1) {
        error = error1;
        return console.log(error.name, error.message);
      }
    };

    return Array2D;

  })();

}).call(this);

},{"./pair":23,"underscore":24}],23:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Pair, _;

  _ = require("underscore");

  module.exports = Pair = (function() {
    function Pair(x1, y1) {
      this.x = x1;
      this.y = y1;
    }

    Pair.prototype.equal = function(pair) {
      return pair && pair.x === this.x && pair.y === this.y;
    };

    Pair.prototype.shift = function(x, y) {
      return new Pair(this.x + x, this.y + y);
    };

    Pair.prototype.times = function(k) {
      return new Pair(this.x * k, this.y * k);
    };

    Pair.prototype.up = function(y) {
      if (y == null) {
        y = 1;
      }
      return new Pair(this.x, this.y - y);
    };

    Pair.prototype.down = function(y) {
      if (y == null) {
        y = 1;
      }
      return new Pair(this.x, this.y + y);
    };

    Pair.prototype.left = function(x) {
      if (x == null) {
        x = 1;
      }
      return new Pair(this.x - x, this.y);
    };

    Pair.prototype.right = function(x) {
      if (x == null) {
        x = 1;
      }
      return new Pair(this.x + x, this.y);
    };

    Pair.prototype.distance = function(to) {
      return Math.abs(this.x - to.x) + Math.abs(this.y - to.y);
    };

    Pair.prototype.cover = function(pair) {
      var cov, i, j, ref, ref1, ref2, ref3, x, y;
      cov = [];
      for (x = i = ref = this.x, ref1 = pair.x; ref <= ref1 ? i <= ref1 : i >= ref1; x = ref <= ref1 ? ++i : --i) {
        for (y = j = ref2 = this.y, ref3 = pair.y; ref2 <= ref3 ? j <= ref3 : j >= ref3; y = ref2 <= ref3 ? ++j : --j) {
          cov.push(new Pair(x, y));
        }
      }
      return cov;
    };

    Pair.prototype.neighbors = function() {
      return _.shuffle([new Pair(this.x, this.y - 1), new Pair(this.x, this.y + 1), new Pair(this.x - 1, this.y), new Pair(this.x + 1, this.y)]);
    };

    Pair.prototype.where = function(pair) {
      var dir;
      dir = null;
      if (this.x === pair.x) {
        if (this.y > pair.y) {
          dir = "up";
        } else if (this.y < pair.y) {
          dir = "down";
        }
      } else if (this.y === pair.y) {
        if (this.x > pair.x) {
          dir = "left";
        } else if (this.x < pair.x) {
          dir = "right";
        }
      }
      return dir;
    };

    Pair.prototype.to_s = function() {
      return this.x + "," + this.y;
    };

    return Pair;

  })();

}).call(this);

},{"underscore":24}],24:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}]},{},[1]);
